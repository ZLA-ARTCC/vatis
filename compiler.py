"""
This script compiles all .station JSON files into appropriate vATIS profiles.
Each vATIS profile must exist in the root directory and be defined in vars below.
Each vATIS profile must contain at least a defined "name" key.
Example:
    {
        "name": "Los Angeles ARTCC (ZLA)",
    }
Ideally, the station profile also includes the "id" key.
"""

import json
import glob

# Search for station files in all sub-folders of ./stations/
ALL_STATIONS = sorted(glob.glob("./stations/*/*.station"))

# The ZLA profile uses specific airports regardless of TRACON or folder.
# It searches all subfolders of ./stations/ for airports listed in ZLA_PROFILE_AIRPORTS
ZLA_PROFILE = "./vATIS-Profile-ZLA.json"
ZLA_PROFILE_AIRPORTS = ['KBUR', 'KLAS', 'KLAX', 'KONT', 'KPSP', 'KSAN', 'KSBA', 'KSNA', 'KVNY']
ZLA_PROFILE_STATIONS = []

# These are TRACON profiles and are based on the sub-folder name in ./stations/.
JCF_PROFILE = "./vATIS-Profile-JCF.json"
JCF_PROFILE_STATIONS = []
L30_PROFILE = "./vATIS-Profile-L30.json"
L30_PROFILE_STATIONS = []
SBA_PROFILE = "./vATIS-Profile-SBA.json"
SBA_PROFILE_STATIONS = []
SCT_PROFILE = "./vATIS-Profile-SCT.json"
SCT_PROFILE_STATIONS = []

def build_station_list(search_query, output_list):
    """ Builds a list of all station files """
    for each_station in ALL_STATIONS:
        for each_search_query in search_query:
            if each_search_query in each_station:
                output_list.append(each_station)

def merge_stations(input_stations, vatis_profile):
    """
    input_stations: A list of station files using relative path (ex: ./stations/SCT/KLAX.station).
        This is generated by build_station_list().
    vatis_profile: The vATIS profile JSON.
    This function merges station files and then injects them into an existing vATIS profile.
    A base profile MUST exist for this to work. This does not build JSON files.
    """
    merged_stations = []
    # Opens each station file from input_stations (a list of files) and appends to merged_stations
    for each_station in input_stations:
        with open(each_station, "r", encoding="utf-8") as station_file:
            station_data = json.load(station_file)
            merged_stations.append(station_data)

    # Opens and loads the vATIS profile
    with open(vatis_profile, "r", encoding="utf-8") as vatis_profile_file:
        new_data = json.load(vatis_profile_file)

    # Writes merged_stations into "stations" key and saves the vATIS profile
    with open(vatis_profile, "w", encoding="utf-8") as vatis_profile_file:
        new_data["stations"] = merged_stations
        json.dump(new_data, vatis_profile_file, indent=2)

# Build the ZLA profile
build_station_list(ZLA_PROFILE_AIRPORTS, ZLA_PROFILE_STATIONS)
merge_stations(ZLA_PROFILE_STATIONS, ZLA_PROFILE)

# Build the JCF profile
build_station_list(['/JCF'], JCF_PROFILE_STATIONS)
merge_stations(JCF_PROFILE_STATIONS, JCF_PROFILE)

# Build the L30 profile
build_station_list(['/L30'], L30_PROFILE_STATIONS)
merge_stations(L30_PROFILE_STATIONS, L30_PROFILE)

# Build the SBA profile
build_station_list(['/SBA'], SBA_PROFILE_STATIONS)
merge_stations(SBA_PROFILE_STATIONS, SBA_PROFILE)

# Build the SCT profile
build_station_list(['/SCT'], SCT_PROFILE_STATIONS)
merge_stations(SCT_PROFILE_STATIONS, SCT_PROFILE)
